package net.bobs.own.ezmenu.meals.db;

import java.sql.Clob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import net.bobs.own.db.h2.db.AutoGeneratedKeysList;
import net.bobs.own.db.h2.db.AutoGeneratedKeysResult;
import net.bobs.own.db.h2.exceptions.NoPreferenceException;
import net.bobs.own.db.h2.pool.H2Database;
import net.bobs.own.db.rundml.exception.ExceptionMessageDialogUtility;
import net.bobs.own.db.rundml.exception.RunDMLException;
import net.bobs.own.db.rundml.mapper.AbstractTableMapper;
import net.bobs.own.db.rundml.mapper.ITable;
import net.bobs.own.ezmenu.meals.ListIngredients;

public class EzMenuMealMapper extends AbstractTableMapper {
	
	static private EzMenuMealMapper mapper = null;
	static private Logger logger = LogManager.getLogger(EzMenuMealMapper.class.getName());
	static private EzMenuMealIngredientMapper ingredientMapper = null;
	
	static public EzMenuMealMapper makeMapper(H2Database db) {
				
		mapper = new EzMenuMealMapper(db);
		return mapper;
		
	}

	static public EzMenuMealMapper getMapper() {

		return mapper;

	}
	
	public EzMenuMealMapper(H2Database db) {
		super(db);
		ingredientMapper = new EzMenuMealIngredientMapper(db);
	}

	
	@Override
	public void insert(ITable table) throws RunDMLException {
		int returnCode = 0;
		Clob clobDirections = null;
		EzMenuMeal meal = null;

		if (table instanceof EzMenuMeal) {
			meal = (EzMenuMeal) table;
		}
		
		final String INSERT_MEAL = "insert into ezmenu.meals " + 
								   "(meal_id, meal_name, meal_catgy, prep_time, directions) " + 
								   "values " 											   + 
								   "(DEFAULT,?,?,?,?) ";

		try {
         Connection conn = db.getConnection();
			db.setSQL(conn,INSERT_MEAL);

			// DEFAULT (next increment) for mealID
			db.setString(1, meal.getMealName());
			db.setString(2, meal.getMealCatgy());
			db.setString(3, meal.getMealPrepTime());
			
			String directions = meal.getMealDirections();
			if (directions != null) {
				clobDirections = db.createClob(conn);
				clobDirections.setString(1, directions.toString());
				db.setClob(4, clobDirections);
			}

			AutoGeneratedKeysResult keyResult = db.executeUpdate(true);
			AutoGeneratedKeysList keyList = keyResult.getAutoGeneratedKeys();
			if (keyList.size() > 1) {
				throw new SQLException("Auto Generated Keys list > 1");
			}
			
			int mealId = keyList.get(0);
			returnCode = keyResult.getReturnCode();
			
			//Insert the Ingredients Into the Database
			for (int ingredIx = 0; ingredIx < meal.sizeIngredients(); ingredIx++) {
				EzMenuMealIngredient ingredient = meal.getIngredient(ingredIx);
				EzMenuMealIngredient newIngredient = new EzMenuMealIngredient(mealId,ingredient.getIngredient(),
																			  ingredient.getQuantity(),
																			  ingredient.getUnitOfMeasure());
				meal.replaceIngredient(ingredIx, newIngredient);
				ingredientMapper.insert(newIngredient);
			}
			
			if (returnCode > 1) {
				logger.debug("Ingredient= " + meal.getMealName() + "inserted into database.");
			}
			db.freeClob(clobDirections);
			db.reset(conn);

		} catch (SQLException | NoPreferenceException ex) {
			RunDMLException rdex = new RunDMLException(ex);
			ExceptionMessageDialogUtility.openExceptionMessageDialog(rdex);
			logger.error(ex.getMessage(), ex);
			throw rdex;
		}
		
	}

	@Override
	public void update(ITable table) throws RunDMLException {

		int returnCode = 0;
		Clob clobDirections = null;

		EzMenuMeal meal = null;
		final String UPDATE_MEAL = 	"update ezmenu.meals " 	+ 
									"set  meal_name = ?, " 	+ 
									"meal_catgy = ?, " 		+ 
									"prep_time = ?, " 		+ 
									"directions = ? "		+ 
									"where  meal_id = ? " 	
									;

		if (table instanceof EzMenuMeal) {
			meal = (EzMenuMeal) table;
		}
		
		try {
			//UPDATE Ingredients BEFORE the meal, this avoids conflicts with using the same prepared statement object
			ArrayList<EzMenuMealIngredient> listIngredients = meal.getIngredients();
			for (EzMenuMealIngredient ingredient : listIngredients) {
				if (ingredient.isMarkedInsert()) {
					ingredientMapper.insert(ingredient);
				} else if (ingredient.isMarkedUpdate()) {
					ingredientMapper.update(ingredient);
				} else if (ingredient.isMarkedDelete()) {
					ingredientMapper.deleteByMealIdIngredientName(ingredient);
				}
			}
			
         Connection conn = db.getConnection();
			db.setSQL(conn,UPDATE_MEAL);

			db.setString(1, meal.getMealName());
			db.setString(2, meal.getMealCatgy());
			db.setString(3, meal.getMealPrepTime());
			
			String directions = meal.getMealDirections();
			if (directions != null) {
				clobDirections = db.createClob(conn);
				clobDirections.setString(1, directions.toString());
				db.setClob(4, clobDirections);
			}
			db.setInt(5, meal.getMealId());
			
			returnCode = db.executeUpdate();			
			if (returnCode > 1) {
				logger.debug("Ingredient= " + meal.getMealName() + "updated in database.");
			}
			db.reset(conn);

		} catch (SQLException | NoPreferenceException ex) {
			RunDMLException rdex = new RunDMLException(ex);
			ExceptionMessageDialogUtility.openExceptionMessageDialog(rdex);
			logger.error(ex.getMessage(), ex);
			throw rdex;
		}		
		
	}

	@Override
	public void delete(ITable table) throws RunDMLException {
		
		int returnCode = 0;
		EzMenuMeal meal = null;
		final String DELETE_MEAL = "delete from ezmenu.meals " + 
								   " where meal_id = ?"
								   ;

		if (table instanceof EzMenuMeal) {
			meal = (EzMenuMeal) table;
		}
		
		try {
			//Delete Ingredients first to avoid conflict with preparedStatement shared by H2DatabaseService
			ArrayList<EzMenuMealIngredient> listIngredients = meal.getIngredients();
			if (listIngredients.size() >= 1) {
				EzMenuMealIngredient ingredient = meal.getIngredient(0);
				ingredientMapper.delete(ingredient);
			}
			
         Connection conn = db.getConnection();
			db.setSQL(conn,DELETE_MEAL);

			// DEFAULT (next increment) for mealID
			db.setInt(1, meal.getMealId());
			listIngredients.clear();
			returnCode = db.executeUpdate();			
			if (returnCode > 1) {
				logger.debug("Ingredient= " + meal.getMealName() + "deleted from database.");
			}
			db.reset(conn);

		} catch (SQLException | NoPreferenceException ex) {
			RunDMLException rdex = new RunDMLException(ex);
			ExceptionMessageDialogUtility.openExceptionMessageDialog(rdex);
			logger.error(ex.getMessage(), ex);
			throw rdex;
		}
		
	}

	@Override
	public List<ITable> select() throws RunDMLException {
	
		ResultSet results = null;
		Clob clobDirections = null;
		EzMenuMeal meal = null;
		ArrayList<ITable> mealsList = new ArrayList<ITable>();
		
		final String SELECT_MEAL = "select meal_id, meal_name, meal_catgy, prep_time, directions " 
									+ "from ezmenu.meals "
									+ "order by meal_name asc"
									;

		try {
		      Connection conn = db.getConnection();
   			db.setSQL(conn,SELECT_MEAL);
   			String directions = null;
   
   			results = db.executeQuery();
   			while (results.next()) {
   				
   				int mealId = results.getInt(1);
   				String mealName = results.getString(2);
   				String mealCatgy = results.getString(3);
   				String mealPrepTime = results.getString(4);
   				clobDirections = results.getClob(5);
   				
   				long directionsLength = clobDirections.length();
   				directions = clobDirections.getSubString(1, (int) directionsLength);
   				
   				//Get the Ingredients List
   				List<ITable> mealIngredients = ingredientMapper.selectById(mealId);
   				ListIngredients list = new ListIngredients();
   				for (ITable record :  mealIngredients) {
   					if (record instanceof ITable) {
   						EzMenuMealIngredient ingredient = (EzMenuMealIngredient) record;
   						list.addIngredient(ingredient);
   					}
   				}
   			
   				meal= new EzMenuMeal(mealId, mealName, mealCatgy, mealPrepTime,
   												 list, directions);
   				mealsList.add(meal);
   			}
   
   			db.reset(conn);
   			if (clobDirections != null) {
   			   db.freeClob(clobDirections);
   			}

		} catch (SQLException | NoPreferenceException ex) {
			RunDMLException rdex = new RunDMLException(ex);
			ExceptionMessageDialogUtility.openExceptionMessageDialog(rdex);
			logger.error(ex.getMessage(), ex);
			throw rdex;
		}
		return mealsList;
	}

	@Override
	public List<ITable> selectById(int id) throws RunDMLException {

		return null;
	}
	
	public List<ITable> selectByCategoryPrep(String category,String prepTime) throws RunDMLException {
	   
	      ResultSet results = null;
	      Clob clobDirections = null;
	      EzMenuMeal meal = null;
	      ArrayList<ITable> mealsList = new ArrayList<ITable>();
	      
	      final String SELECT_BYCATGY = "select meal_id, meal_name, meal_catgy, prep_time, directions " 
	                           + "from ezmenu.meals "
	                           + "where meal_catgy = ? "
	                           + "  and prep_time = ? "
	                           + "order by meal_id desc"
	                           ;

	      try {
	            Connection conn = db.getConnection();
   	         db.setSQL(conn,SELECT_BYCATGY);
   	         String directions = null;
   
   	         db.setString(1, category);
   	         db.setString(2, prepTime);
   	         results = db.executeQuery();
   	         while (results.next()) {
   	            
   	            int mealId = results.getInt(1);
   	            String mealName = results.getString(2);
   	            String mealCatgy = results.getString(3);
   	            String mealPrepTime = results.getString(4);
   	            clobDirections = results.getClob(5);
   	            
   	            long directionsLength = clobDirections.length();
   	            directions = clobDirections.getSubString(1, (int) directionsLength);
   	            
   	            //Get the Ingredients List
   	            List<ITable> mealIngredients = ingredientMapper.selectById(mealId);
   	            ListIngredients list = new ListIngredients();
   	            for (ITable record :  mealIngredients) {
   	               if (record instanceof ITable) {
   	                  EzMenuMealIngredient ingredient = (EzMenuMealIngredient) record;
   	                  list.addIngredient(ingredient);
   	               }
   	            }
   	         
   	            meal= new EzMenuMeal(mealId, mealName, mealCatgy, mealPrepTime,
   	                                     list, directions);
   	            mealsList.add(meal);
   	            db.freeClob(clobDirections);
   	         }
   
   	         db.reset(conn);

	      } catch (SQLException | NoPreferenceException ex) {
	         RunDMLException rdex = new RunDMLException(ex);
	         ExceptionMessageDialogUtility.openExceptionMessageDialog(rdex);
	         logger.error(ex.getMessage(), ex);
	         throw rdex;
	      }
	      return mealsList;
	   }
	
	public List<ITable> selectByLimitOffset(int limit, int offset) throws RunDMLException {
	
		ResultSet results = null;
		Clob clobDirections = null;
		EzMenuMeal meal = null;
		ArrayList<ITable> mealsList = new ArrayList<ITable>();
		
		final String SELECT_MEAL_LIMITOFFSET = "select meal_id, meal_name, meal_catgy, prep_time, directions " 
									+ "from ezmenu.meals "
									+ "limit ? offset? "
									;

		try {
		      Connection conn = db.getConnection();
   			db.setSQL(conn,SELECT_MEAL_LIMITOFFSET);
   			String directions = null;
   
   			db.setInt(1, limit);
   			db.setInt(2, offset);
   			results = db.executeQuery();
   			while (results.next()) {
   				
   				int mealId = results.getInt(1);
   				String mealName = results.getString(2);
   				String mealCatgy = results.getString(3);
   				String mealPrepTime = results.getString(4);
   				
   				clobDirections = db.createClob(conn);
   				long directionsLength = clobDirections.length();
   				directions = clobDirections.getSubString(1, (int) directionsLength);
   				
   				//Get the Ingredients List
   				List<ITable> mealIngredients = ingredientMapper.selectById(mealId);
   				ListIngredients list = new ListIngredients();
   				for (ITable record :  mealIngredients) {
   					if (record instanceof ITable) {
   						EzMenuMealIngredient ingredient = (EzMenuMealIngredient) record;
   						list.addIngredient(ingredient);
   					}
   				}
   
   				meal= new EzMenuMeal(mealId, mealName, mealCatgy, mealPrepTime,
   												 list, directions);
   				mealsList.add(meal);
   			}
   
   			results.close();
   			db.reset(conn);
   			db.freeClob(clobDirections);

		} catch (SQLException | NoPreferenceException ex) {
			RunDMLException rdex = new RunDMLException(ex);
			ExceptionMessageDialogUtility.openExceptionMessageDialog(rdex);
			logger.error(ex.getMessage(), ex);
			throw rdex;
		}
		return mealsList;
	}

}
